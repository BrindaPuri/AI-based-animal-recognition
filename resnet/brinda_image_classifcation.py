# -*- coding: utf-8 -*-
"""Brinda-Image-Classifcation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GGjaIfy6TRIBNThoRUr_UUc-0SFKINOa

# Install fastai dependencies
"""

!pip install fastai==1.0.58

from fastai.vision import *

"""# Download Custom Classification Data From Roboflow"""

#follow the link below to get your download code from from Roboflow
!pip install roboflow

from roboflow import Roboflow
rf = Roboflow(api_key="K5BwZ8klaouCeUYV0RXV")
project = rf.workspace("sanskriti-jain").project("trail-camera-animal-detection")
dataset = project.version(5).download("clip")

dataset.location

#build fastai dataset loader
import numpy as np
from pathlib import Path
np.random.seed(42)
#fastai automatically factors the ./train and ./valid folders into seperate datasets
#more details https://docs.fast.ai/vision.data.html#ImageDataLoaders.from_folder
path = Path(dataset.location)
data = ImageDataBunch.from_folder(path, size=224, num_workers=4).normalize(imagenet_stats)
#data = ImageDataLoaders.from_folder(path, size=224, num_workers=4).normalize(imagenet_stats)

#double check the data classes
data.classes

#take a peak at the batch to make sure things were loaded correctly
data.show_batch(rows=3, figsize=(7, 8))

"""# Set up fastai Resnet model"""

from fastai.metrics import error_rate # 1 - accuracy
learn = cnn_learner(data, models.resnet34, metrics=error_rate)

#print network layers
learn

"""# Train Custom Resnet Image Classifier"""

from fastai.callbacks import *
early_stop = EarlyStoppingCallback(learn, patience=20)
save_best_model = SaveModelCallback(learn, name='best_resnet34')

#frozen training step
defaults.device = torch.device('cuda') # makes sure the gpu is used
learn.fit_one_cycle(1, callbacks=[early_stop, save_best_model])

#load best model from frozen training
learn.load('best_resnet34')

learn.unfreeze()

def find_appropriate_lr(model:Learner, lr_diff:int = 15, loss_threshold:float = .05, adjust_value:float = 1, plot:bool = False) -> float:
    #Run the Learning Rate Finder
    model.lr_find()
    
    #Get loss values and their corresponding gradients, and get lr values
    losses = np.array(model.recorder.losses)
    min_loss_index = np.argmin(losses)
    
    
    #loss_grad = np.gradient(losses)
    lrs = model.recorder.lrs
    
    #return the learning rate that produces the minimum loss divide by 10   
    return lrs[min_loss_index] / 10

optimal_lr = find_appropriate_lr(learn)

learn.fit_one_cycle(1, max_lr=slice(optimal_lr/10, optimal_lr), callbacks=[early_stop, save_best_model])

learn.load('best_resnet34')

"""# Evaluate Classifier Performance"""

interp = ClassificationInterpretation.from_learner(learn)
interp.plot_confusion_matrix()

interp.plot_top_losses(9, figsize=(15,15))

#run inference on test images
import glob
from IPython.display import Image, display

model = learn.model
model = model.cuda()

for imageName in glob.glob('/content/Trail-Camera-Animal-Detection-4/test/*/*.jpg'):
    print(imageName)
    img = open_image(imageName)
    prediction = learn.predict(img)
    #print(prediction)
    print(prediction[0])
    display(Image(filename=imageName))
    print("\n")

"""# Save custom classification model for future use"""

# Commented out IPython magic to ensure Python compatibility.
#model is automatically saved with the "save_best_model" callback
# %ls /content/Trail-Camera-Animal-Detection-4/models

from google.colab import files
files.download('/content/Trail-Camera-Animal-Detection-4/models/best_resnet34.pth')

#HOME = os.getcwd()
#%cd {HOME}
#project.version(dataset.version).deploy(model_type="resnet34", model_path=f"{HOME}/runs/detect/train/")