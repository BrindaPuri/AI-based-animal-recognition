# -*- coding: utf-8 -*-
"""ResNet Quickstart

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eelh8G9zLGOjnaqM6V_soL8mh01WEfYx
"""

import os
file_names=os.listdir("/content/drive/Shareddrives/193/Camera Data/Caltech_Camera_Traps/eccv_18_all_images_sm")
folder_size=len(os.listdir("/content/drive/Shareddrives/193/Camera Data/Caltech_Camera_Traps/eccv_18_all_images_sm"))
print(folder_size)

# Download ImageNet labels
!wget https://raw.githubusercontent.com/pytorch/hub/master/imagenet_classes.txt

import pandas as pd
csv_dir="/content/drive/Shareddrives/193/Code/CSV/Caltech_Camera_labels.csv"
df = pd.read_csv(csv_dir)
image_id = df.image_id
label=df.original_label
df.drop(columns=['loaction_id','sequence_id','scientific_name','common_name','datetime','annotation_I','kingdom','phylum','subphylum','superclass','class','subclass','infraclass','superorder','order','suborder','url','dataset_name','variety','subspecies','species','genus','tribe','subfamily','family','superfamily','infraorder'],inplace=True)
df

data=df[['image_id','original_label']]
data = data.dropna(subset=['image_id'])
data = data.reset_index()
print(data.head())

df.groupby('original_label').count()
#data.groupby(['original_label'])['original_label'].count()

import matplotlib.pyplot as plt
import seaborn as sns
plt.figure(figsize=(12,12))
fg = sns.countplot(x= df['original_label'])
fg.set_title("Count Plot of Classes")
fg.set_xlabel("Label number")
fg.set_ylabel("Number of Data points")

path = '/content/drive/Shareddrives/193/Camera Data/Caltech_Camera_Traps/eccv_18_all_images_sm/'
# Check whether a path pointing to a file
isFile=os.path.isfile(path+'59974040-23d2-11e8-a6a3-ec086b02610b.jpg')
print(isFile)

print(data.original_label.unique())

data.to_json(r'/content/drive/Shareddrives/193/Code/Brinda/Cal_dataset.json')

import matplotlib.pyplot as plt
import numpy as np
import PIL
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.python.keras.layers import Dense, Flatten
from tensorflow.keras.models import Sequential
from tensorflow.keras.optimizers import Adam
from sklearn.model_selection import train_test_split
import pathlib
import shutil
import cv2
data_dir = pathlib.Path("/content/drive/Shareddrives/193/Camera Data/Caltech_Camera_Traps")

image_id_train,image_id_test,label_train,label_test = train_test_split(image_id,label,test_size=0.2)

len(image_id_train)

print(image_id[0])

print(data_dir)

img = list(data_dir.glob('eccv_18_all_images_sm/*'))

IMG_NO=3
print(img[IMG_NO])
PIL.Image.open(str(img[IMG_NO]))

import torch
resnet = torch.hub.load('pytorch/vision:v0.10.0', 'resnet50', pretrained=True)
resnet.trainable = False
# activating the evaluation mode after this we can feed the input
resnet.eval()
from torchvision import transforms
def transform_img(img):
  transform = transforms.Compose([
  transforms.Resize(700),
  transforms.CenterCrop(700),
  transforms.ToTensor(),
  transforms.Normalize(mean = [0.485, 0.456, 0.406],
  std = [0.229, 0.224, 0.225])
  ]) 
  Transformed_inputImage=transform(img)
  print(Transformed_inputImage.shape)
  return Transformed_inputImage

im = tf.keras.preprocessing.image.load_img(img[IMG_NO])
im=transform_img(im)

import torch
InputImg_batched = torch.unsqueeze(im, 0)

out = resnet(InputImg_batched)

import json
original_map = data.original_label.unique()
with open("output.json", "w") as json:
  json.write("{")
  for count,line in enumerate(original_map):
    if line=='empty':
      continue
    json.write("'"+str(count-1)+"':'")
    json.write("".join(line) + "',") 
with open("output.json", 'rb+') as filehandle:
    filehandle.seek(-1, os.SEEK_END)
    filehandle.truncate()
json = open('output.json', 'a') # Open a file in append mode
json.write('}') # Write some text
json.close() # Close the file
print(original_map)

with open('/content/imagenet_classes.txt') as f:
  labels = [line.strip() for line in f.readlines()]

_, predicted = torch.max(out, 1)
percentage = torch.softmax(out, dim = 1)[0] * 100
print(labels[predicted[0]], percentage[predicted[0]].item())

"""https://vitalflux.com/pytorch-load-predict-pretrained-resnet-model/"""

#Training

img_height,img_width=747,747
batch_size=32
train_ds = tf.keras.preprocessing.image_dataset_from_directory(
  data_dir,
  validation_split=0.2,
  subset="training",
  seed=123,
  image_size=(img_height, img_width),
  batch_size=batch_size)

import glob
train_dir="/content/Train"
for jpgfile in image_id_train:
  glob.iglob(os.path.join(file_names, +"*.jpg"))
  shutil.copy(jpgfile, train_dir)

import glob
train_dir="/content/Train"
jpgfile='/content/drive/Shareddrives/193/Camera Data/Caltech_Camera_Traps/eccv_18_all_images_sm/'+image_id_train[0]+'.jpeg'
shutil.copy(jpgfile, train_dir)